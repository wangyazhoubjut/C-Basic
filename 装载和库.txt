1：可执行文件装载到内存

** 每个程序运行起来的时候  都拥有自己独立的虚拟地址空间。32位的4GB 寻址 0-232-1


linux：Operating system 1GB  user Process 3GB
windows：Operating system 2GB  user Process 2GB 可以修改

装载方式：程序执行时候指令和数据必须要在内存中才可以正常运行
最简单的方法是将程序所需要的指令和数据全部装入到内存中，这样
程序可以正常运行，但是多数情况下 程序所需要的内存数量大于物理
内存的数量，但是其实总的来说 老哥：
    我们可以将程序中最常用的部分驻留到内存中，不太常用的放磁盘里面
	这就是动态载入的基本原理  覆盖装入和页映射 这两个方法

（1）覆盖装入
（2）页映射  将内存和所有磁盘中的数据和指令按照”页“位单位分为
     若干个页，大概2M 4M的样子
	 假设内存空间只有四个页  然后程序分为了六个页

	 在执行的过程中 四个页加载满了  此时需要第五个页了  必须要舍弃一页啊

	 a：FIFO 先进先出算法
	 b：LUR 最少使用算法

对操作系统而言：
    1：创建一个独立的虚拟地址空间
	2：读取可执行文件头，建立虚拟空间与可执行文件的映射关系
	3：将CPU的指令寄存器设置成可执行文件入口地址  启动运行
	这个时候可执行文件的真实指令和数据都没有被装入到内存中
操作系统只是通过可执行文件头部的信息建立起可执行文件和进行虚存
之间的映射关系。 执行程序入口地址 cpu发现空页面 发生页错误
cpu将控制器交到操作系统，操作系统由专门的页处理函数来处理